/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jquery.ripples";
exports.ids = ["vendor-chunks/jquery.ripples"];
exports.modules = {

/***/ "(ssr)/./node_modules/jquery.ripples/dist/jquery.ripples.js":
/*!************************************************************!*\
  !*** ./node_modules/jquery.ripples/dist/jquery.ripples.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * jQuery Ripples plugin v0.6.3 / https://github.com/sirxemic/jquery.ripples\n * MIT License\n * @author sirxemic / https://sirxemic.com/\n */\n\n(function (global, factory) {\n\t true ? factory(__webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\")) :\n\t0;\n}(this, (function ($) { 'use strict';\n\n$ = $ && 'default' in $ ? $['default'] : $;\n\nvar gl;\r\nvar $window = $(window); // There is only one window, so why not cache the jQuery-wrapped window?\r\n\r\nfunction isPercentage(str) {\r\n\treturn str[str.length - 1] == '%';\r\n}\r\n\r\n/**\r\n *  Load a configuration of GL settings which the browser supports.\r\n *  For example:\r\n *  - not all browsers support WebGL\r\n *  - not all browsers support floating point textures\r\n *  - not all browsers support linear filtering for floating point textures\r\n *  - not all browsers support rendering to floating point textures\r\n *  - some browsers *do* support rendering to half-floating point textures instead.\r\n */\r\nfunction loadConfig() {\r\n\tvar canvas = document.createElement('canvas');\r\n\tgl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n\r\n\tif (!gl) {\r\n\t\t// Browser does not support WebGL.\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Load extensions\r\n\tvar extensions = {};\r\n\t[\r\n\t\t'OES_texture_float',\r\n\t\t'OES_texture_half_float',\r\n\t\t'OES_texture_float_linear',\r\n\t\t'OES_texture_half_float_linear'\r\n\t].forEach(function(name) {\r\n\t\tvar extension = gl.getExtension(name);\r\n\t\tif (extension) {\r\n\t\t\textensions[name] = extension;\r\n\t\t}\r\n\t});\r\n\r\n\t// If no floating point extensions are supported we can bail out early.\r\n\tif (!extensions.OES_texture_float) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tvar configs = [];\r\n\r\n\tfunction createConfig(type, glType, arrayType) {\r\n\t\tvar name = 'OES_texture_' + type,\r\n\t\t\t\tnameLinear = name + '_linear',\r\n\t\t\t\tlinearSupport = nameLinear in extensions,\r\n\t\t\t\tconfigExtensions = [name];\r\n\r\n\t\tif (linearSupport) {\r\n\t\t\tconfigExtensions.push(nameLinear);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: glType,\r\n\t\t\tarrayType: arrayType,\r\n\t\t\tlinearSupport: linearSupport,\r\n\t\t\textensions: configExtensions\r\n\t\t};\r\n\t}\r\n\r\n\tconfigs.push(\r\n\t\tcreateConfig('float', gl.FLOAT, Float32Array)\r\n\t);\r\n\r\n\tif (extensions.OES_texture_half_float) {\r\n\t\tconfigs.push(\r\n\t\t\t// Array type should be Uint16Array, but at least on iOS that breaks. In that case we\r\n\t\t\t// just initialize the textures with data=null, instead of data=new Uint16Array(...).\r\n\t\t\t// This makes initialization a tad slower, but it's still negligible.\r\n\t\t\tcreateConfig('half_float', extensions.OES_texture_half_float.HALF_FLOAT_OES, null)\r\n\t\t);\r\n\t}\r\n\r\n\t// Setup the texture and framebuffer\r\n\tvar texture = gl.createTexture();\r\n\tvar framebuffer = gl.createFramebuffer();\r\n\r\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n\t// Check for each supported texture type if rendering to it is supported\r\n\tvar config = null;\r\n\r\n\tfor (var i = 0; i < configs.length; i++) {\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, configs[i].type, null);\r\n\r\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\r\n\t\t\tconfig = configs[i];\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n}\r\n\r\nfunction createImageData(width, height) {\r\n\ttry {\r\n\t\treturn new ImageData(width, height);\r\n\t}\r\n\tcatch (e) {\r\n\t\t// Fallback for IE\r\n\t\tvar canvas = document.createElement('canvas');\r\n\t\treturn canvas.getContext('2d').createImageData(width, height);\r\n\t}\r\n}\r\n\r\nfunction translateBackgroundPosition(value) {\r\n\tvar parts = value.split(' ');\r\n\r\n\tif (parts.length === 1) {\r\n\t\tswitch (value) {\r\n\t\t\tcase 'center':\r\n\t\t\t\treturn ['50%', '50%'];\r\n\t\t\tcase 'top':\r\n\t\t\t\treturn ['50%', '0'];\r\n\t\t\tcase 'bottom':\r\n\t\t\t\treturn ['50%', '100%'];\r\n\t\t\tcase 'left':\r\n\t\t\t\treturn ['0', '50%'];\r\n\t\t\tcase 'right':\r\n\t\t\t\treturn ['100%', '50%'];\r\n\t\t\tdefault:\r\n\t\t\t\treturn [value, '50%'];\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\treturn parts.map(function(part) {\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase 'center':\r\n\t\t\t\t\treturn '50%';\r\n\t\t\t\tcase 'top':\r\n\t\t\t\tcase 'left':\r\n\t\t\t\t\treturn '0';\r\n\t\t\t\tcase 'right':\r\n\t\t\t\tcase 'bottom':\r\n\t\t\t\t\treturn '100%';\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn part;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction createProgram(vertexSource, fragmentSource, uniformValues) {\r\n\tfunction compileSource(type, source) {\r\n\t\tvar shader = gl.createShader(type);\r\n\t\tgl.shaderSource(shader, source);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader));\r\n\t\t}\r\n\t\treturn shader;\r\n\t}\r\n\r\n\tvar program = {};\r\n\r\n\tprogram.id = gl.createProgram();\r\n\tgl.attachShader(program.id, compileSource(gl.VERTEX_SHADER, vertexSource));\r\n\tgl.attachShader(program.id, compileSource(gl.FRAGMENT_SHADER, fragmentSource));\r\n\tgl.linkProgram(program.id);\r\n\tif (!gl.getProgramParameter(program.id, gl.LINK_STATUS)) {\r\n\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(program.id));\r\n\t}\r\n\r\n\t// Fetch the uniform and attribute locations\r\n\tprogram.uniforms = {};\r\n\tprogram.locations = {};\r\n\tgl.useProgram(program.id);\r\n\tgl.enableVertexAttribArray(0);\r\n\tvar match, name, regex = /uniform (\\w+) (\\w+)/g, shaderCode = vertexSource + fragmentSource;\r\n\twhile ((match = regex.exec(shaderCode)) != null) {\r\n\t\tname = match[2];\r\n\t\tprogram.locations[name] = gl.getUniformLocation(program.id, name);\r\n\t}\r\n\r\n\treturn program;\r\n}\r\n\r\nfunction bindTexture(texture, unit) {\r\n\tgl.activeTexture(gl.TEXTURE0 + (unit || 0));\r\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n}\r\n\r\nfunction extractUrl(value) {\r\n\tvar urlMatch = /url\\([\"']?([^\"']*)[\"']?\\)/.exec(value);\r\n\tif (urlMatch == null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn urlMatch[1];\r\n}\r\n\r\nfunction isDataUri(url) {\r\n\treturn url.match(/^data:/);\r\n}\r\n\r\nvar config = loadConfig();\r\nvar transparentPixels = createImageData(32, 32);\r\n\r\n// Extend the css\r\n$('head').prepend('<style>.jquery-ripples { position: relative; z-index: 0; }</style>');\r\n\r\n// RIPPLES CLASS DEFINITION\r\n// =========================\r\n\r\nvar Ripples = function (el, options) {\r\n\tvar that = this;\r\n\r\n\tthis.$el = $(el);\r\n\r\n\t// Init properties from options\r\n\tthis.interactive = options.interactive;\r\n\tthis.resolution = options.resolution;\r\n\tthis.textureDelta = new Float32Array([1 / this.resolution, 1 / this.resolution]);\r\n\r\n\tthis.perturbance = options.perturbance;\r\n\tthis.dropRadius = options.dropRadius;\r\n\r\n\tthis.crossOrigin = options.crossOrigin;\r\n\tthis.imageUrl = options.imageUrl;\r\n\r\n\t// Init WebGL canvas\r\n\tvar canvas = document.createElement('canvas');\r\n\tcanvas.width = this.$el.innerWidth();\r\n\tcanvas.height = this.$el.innerHeight();\r\n\tthis.canvas = canvas;\r\n\tthis.$canvas = $(canvas);\r\n\tthis.$canvas.css({\r\n\t\tposition: 'absolute',\r\n\t\tleft: 0,\r\n\t\ttop: 0,\r\n\t\tright: 0,\r\n\t\tbottom: 0,\r\n\t\tzIndex: -1\r\n\t});\r\n\r\n\tthis.$el.addClass('jquery-ripples').append(canvas);\r\n\tthis.context = gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n\r\n\t// Load extensions\r\n\tconfig.extensions.forEach(function(name) {\r\n\t\tgl.getExtension(name);\r\n\t});\r\n\r\n\t// Auto-resize when window size changes.\r\n\tthis.updateSize = this.updateSize.bind(this);\r\n\t$(window).on('resize', this.updateSize);\r\n\r\n\t// Init rendertargets for ripple data.\r\n\tthis.textures = [];\r\n\tthis.framebuffers = [];\r\n\tthis.bufferWriteIndex = 0;\r\n\tthis.bufferReadIndex = 1;\r\n\r\n\tvar arrayType = config.arrayType;\r\n\tvar textureData = arrayType ? new arrayType(this.resolution * this.resolution * 4) : null;\r\n\r\n\tfor (var i = 0; i < 2; i++) {\r\n\t\tvar texture = gl.createTexture();\r\n\t\tvar framebuffer = gl.createFramebuffer();\r\n\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, config.linearSupport ? gl.LINEAR : gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.resolution, this.resolution, 0, gl.RGBA, config.type, textureData);\r\n\r\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n\t\tthis.textures.push(texture);\r\n\t\tthis.framebuffers.push(framebuffer);\r\n\t}\r\n\r\n\t// Init GL stuff\r\n\tthis.quad = gl.createBuffer();\r\n\tgl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\r\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n\t\t-1, -1,\r\n\t\t+1, -1,\r\n\t\t+1, +1,\r\n\t\t-1, +1\r\n\t]), gl.STATIC_DRAW);\r\n\r\n\tthis.initShaders();\r\n\tthis.initTexture();\r\n\tthis.setTransparentTexture();\r\n\r\n\t// Load the image either from the options or CSS rules\r\n\tthis.loadImage();\r\n\r\n\t// Set correct clear color and blend mode (regular alpha blending)\r\n\tgl.clearColor(0, 0, 0, 0);\r\n\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\t// Plugin is successfully initialized!\r\n\tthis.visible = true;\r\n\tthis.running = true;\r\n\tthis.inited = true;\r\n\tthis.destroyed = false;\r\n\r\n\tthis.setupPointerEvents();\r\n\r\n\t// Init animation\r\n\tfunction step() {\r\n\t\tif (!that.destroyed) {\r\n\t\t\tthat.step();\r\n\r\n\t\t\trequestAnimationFrame(step);\r\n\t\t}\r\n\t}\r\n\r\n\trequestAnimationFrame(step);\r\n};\r\n\r\nRipples.DEFAULTS = {\r\n\timageUrl: null,\r\n\tresolution: 256,\r\n\tdropRadius: 20,\r\n\tperturbance: 0.03,\r\n\tinteractive: true,\r\n\tcrossOrigin: ''\r\n};\r\n\r\nRipples.prototype = {\r\n\r\n\t// Set up pointer (mouse + touch) events\r\n\tsetupPointerEvents: function() {\r\n\t\tvar that = this;\r\n\r\n\t\tfunction pointerEventsEnabled() {\r\n\t\t\treturn that.visible && that.running && that.interactive;\r\n\t\t}\r\n\r\n\t\tfunction dropAtPointer(pointer, big) {\r\n\t\t\tif (pointerEventsEnabled()) {\r\n\t\t\t\tthat.dropAtPointer(\r\n\t\t\t\t\tpointer,\r\n\t\t\t\t\tthat.dropRadius * (big ? 1.5 : 1),\r\n\t\t\t\t\t(big ? 0.14 : 0.01)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Start listening to pointer events\r\n\t\tthis.$el\r\n\r\n\t\t\t// Create regular, small ripples for mouse move and touch events...\r\n\t\t\t.on('mousemove.ripples', function(e) {\r\n\t\t\t\tdropAtPointer(e);\r\n\t\t\t})\r\n\t\t\t.on('touchmove.ripples touchstart.ripples', function(e) {\r\n\t\t\t\tvar touches = e.originalEvent.changedTouches;\r\n\t\t\t\tfor (var i = 0; i < touches.length; i++) {\r\n\t\t\t\t\tdropAtPointer(touches[i]);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\t// ...and only a big ripple on mouse down events.\r\n\t\t\t.on('mousedown.ripples', function(e) {\r\n\t\t\t\tdropAtPointer(e, true);\r\n\t\t\t});\r\n\t},\r\n\r\n\t// Load the image either from the options or the element's CSS rules.\r\n\tloadImage: function() {\r\n\t\tvar that = this;\r\n\r\n\t\tgl = this.context;\r\n\r\n\t\tvar newImageSource = this.imageUrl ||\r\n\t\t\textractUrl(this.originalCssBackgroundImage) ||\r\n\t\t\textractUrl(this.$el.css('backgroundImage'));\r\n\r\n\t\t// If image source is unchanged, don't reload it.\r\n\t\tif (newImageSource == this.imageSource) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.imageSource = newImageSource;\r\n\r\n\t\t// Falsy source means no background.\r\n\t\tif (!this.imageSource) {\r\n\t\t\tthis.setTransparentTexture();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Load the texture from a new image.\r\n\t\tvar image = new Image;\r\n\t\timage.onload = function() {\r\n\t\t\tgl = that.context;\r\n\r\n\t\t\t// Only textures with dimensions of powers of two can have repeat wrapping.\r\n\t\t\tfunction isPowerOfTwo(x) {\r\n\t\t\t\treturn (x & (x - 1)) == 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar wrapping = (isPowerOfTwo(image.width) && isPowerOfTwo(image.height)) ? gl.REPEAT : gl.CLAMP_TO_EDGE;\r\n\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, that.backgroundTexture);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapping);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapping);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n\t\t\tthat.backgroundWidth = image.width;\r\n\t\t\tthat.backgroundHeight = image.height;\r\n\r\n\t\t\t// Hide the background that we're replacing.\r\n\t\t\tthat.hideCssBackground();\r\n\t\t};\r\n\r\n\t\t// Fall back to a transparent texture when loading the image failed.\r\n\t\timage.onerror = function() {\r\n\t\t\tgl = that.context;\r\n\r\n\t\t\tthat.setTransparentTexture();\r\n\t\t};\r\n\r\n\t\t// Disable CORS when the image source is a data URI.\r\n\t\timage.crossOrigin = isDataUri(this.imageSource) ? null : this.crossOrigin;\r\n\r\n\t\timage.src = this.imageSource;\r\n\t},\r\n\r\n\tstep: function() {\r\n\t\tgl = this.context;\r\n\r\n\t\tif (!this.visible) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.computeTextureBoundaries();\r\n\r\n\t\tif (this.running) {\r\n\t\t\tthis.update();\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\t},\r\n\r\n\tdrawQuad: function() {\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.quad);\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\r\n\t},\r\n\r\n\trender: function() {\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n\t\tgl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\t\tgl.enable(gl.BLEND);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\t\tgl.useProgram(this.renderProgram.id);\r\n\r\n\t\tbindTexture(this.backgroundTexture, 0);\r\n\t\tbindTexture(this.textures[0], 1);\r\n\r\n\t\tgl.uniform1f(this.renderProgram.locations.perturbance, this.perturbance);\r\n\t\tgl.uniform2fv(this.renderProgram.locations.topLeft, this.renderProgram.uniforms.topLeft);\r\n\t\tgl.uniform2fv(this.renderProgram.locations.bottomRight, this.renderProgram.uniforms.bottomRight);\r\n\t\tgl.uniform2fv(this.renderProgram.locations.containerRatio, this.renderProgram.uniforms.containerRatio);\r\n\t\tgl.uniform1i(this.renderProgram.locations.samplerBackground, 0);\r\n\t\tgl.uniform1i(this.renderProgram.locations.samplerRipples, 1);\r\n\r\n\t\tthis.drawQuad();\r\n\t\tgl.disable(gl.BLEND);\r\n\t},\r\n\r\n\tupdate: function() {\r\n\t\tgl.viewport(0, 0, this.resolution, this.resolution);\r\n\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\r\n\t\tbindTexture(this.textures[this.bufferReadIndex]);\r\n\t\tgl.useProgram(this.updateProgram.id);\r\n\r\n\t\tthis.drawQuad();\r\n\r\n\t\tthis.swapBufferIndices();\r\n\t},\r\n\r\n\tswapBufferIndices: function() {\r\n\t\tthis.bufferWriteIndex = 1 - this.bufferWriteIndex;\r\n\t\tthis.bufferReadIndex = 1 - this.bufferReadIndex;\r\n\t},\r\n\r\n\tcomputeTextureBoundaries: function() {\r\n\t\tvar backgroundSize = this.$el.css('background-size');\r\n\t\tvar backgroundAttachment = this.$el.css('background-attachment');\r\n\t\tvar backgroundPosition = translateBackgroundPosition(this.$el.css('background-position'));\r\n\r\n\t\t// Here the 'container' is the element which the background adapts to\r\n\t\t// (either the chrome window or some element, depending on attachment)\r\n\t\tvar container;\r\n\t\tif (backgroundAttachment == 'fixed') {\r\n\t\t\tcontainer = { left: window.pageXOffset, top: window.pageYOffset };\r\n\t\t\tcontainer.width = $window.width();\r\n\t\t\tcontainer.height = $window.height();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer = this.$el.offset();\r\n\t\t\tcontainer.width = this.$el.innerWidth();\r\n\t\t\tcontainer.height = this.$el.innerHeight();\r\n\t\t}\r\n\r\n\t\t// TODO: background-clip\r\n\t\tif (backgroundSize == 'cover') {\r\n\t\t\tvar scale = Math.max(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\r\n\r\n\t\t\tvar backgroundWidth = this.backgroundWidth * scale;\r\n\t\t\tvar backgroundHeight = this.backgroundHeight * scale;\r\n\t\t}\r\n\t\telse if (backgroundSize == 'contain') {\r\n\t\t\tvar scale = Math.min(container.width / this.backgroundWidth, container.height / this.backgroundHeight);\r\n\r\n\t\t\tvar backgroundWidth = this.backgroundWidth * scale;\r\n\t\t\tvar backgroundHeight = this.backgroundHeight * scale;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbackgroundSize = backgroundSize.split(' ');\r\n\t\t\tvar backgroundWidth = backgroundSize[0] || '';\r\n\t\t\tvar backgroundHeight = backgroundSize[1] || backgroundWidth;\r\n\r\n\t\t\tif (isPercentage(backgroundWidth)) {\r\n\t\t\t\tbackgroundWidth = container.width * parseFloat(backgroundWidth) / 100;\r\n\t\t\t}\r\n\t\t\telse if (backgroundWidth != 'auto') {\r\n\t\t\t\tbackgroundWidth = parseFloat(backgroundWidth);\r\n\t\t\t}\r\n\r\n\t\t\tif (isPercentage(backgroundHeight)) {\r\n\t\t\t\tbackgroundHeight = container.height * parseFloat(backgroundHeight) / 100;\r\n\t\t\t}\r\n\t\t\telse if (backgroundHeight != 'auto') {\r\n\t\t\t\tbackgroundHeight = parseFloat(backgroundHeight);\r\n\t\t\t}\r\n\r\n\t\t\tif (backgroundWidth == 'auto' && backgroundHeight == 'auto') {\r\n\t\t\t\tbackgroundWidth = this.backgroundWidth;\r\n\t\t\t\tbackgroundHeight = this.backgroundHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (backgroundWidth == 'auto') {\r\n\t\t\t\t\tbackgroundWidth = this.backgroundWidth * (backgroundHeight / this.backgroundHeight);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (backgroundHeight == 'auto') {\r\n\t\t\t\t\tbackgroundHeight = this.backgroundHeight * (backgroundWidth / this.backgroundWidth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Compute backgroundX and backgroundY in page coordinates\r\n\t\tvar backgroundX = backgroundPosition[0];\r\n\t\tvar backgroundY = backgroundPosition[1];\r\n\r\n\t\tif (isPercentage(backgroundX)) {\r\n\t\t\tbackgroundX = container.left + (container.width - backgroundWidth) * parseFloat(backgroundX) / 100;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbackgroundX = container.left + parseFloat(backgroundX);\r\n\t\t}\r\n\r\n\t\tif (isPercentage(backgroundY)) {\r\n\t\t\tbackgroundY = container.top + (container.height - backgroundHeight) * parseFloat(backgroundY) / 100;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbackgroundY = container.top + parseFloat(backgroundY);\r\n\t\t}\r\n\r\n\t\tvar elementOffset = this.$el.offset();\r\n\r\n\t\tthis.renderProgram.uniforms.topLeft = new Float32Array([\r\n\t\t\t(elementOffset.left - backgroundX) / backgroundWidth,\r\n\t\t\t(elementOffset.top - backgroundY) / backgroundHeight\r\n\t\t]);\r\n\t\tthis.renderProgram.uniforms.bottomRight = new Float32Array([\r\n\t\t\tthis.renderProgram.uniforms.topLeft[0] + this.$el.innerWidth() / backgroundWidth,\r\n\t\t\tthis.renderProgram.uniforms.topLeft[1] + this.$el.innerHeight() / backgroundHeight\r\n\t\t]);\r\n\r\n\t\tvar maxSide = Math.max(this.canvas.width, this.canvas.height);\r\n\r\n\t\tthis.renderProgram.uniforms.containerRatio = new Float32Array([\r\n\t\t\tthis.canvas.width / maxSide,\r\n\t\t\tthis.canvas.height / maxSide\r\n\t\t]);\r\n\t},\r\n\r\n\tinitShaders: function() {\r\n\t\tvar vertexShader = [\r\n\t\t\t'attribute vec2 vertex;',\r\n\t\t\t'varying vec2 coord;',\r\n\t\t\t'void main() {',\r\n\t\t\t\t'coord = vertex * 0.5 + 0.5;',\r\n\t\t\t\t'gl_Position = vec4(vertex, 0.0, 1.0);',\r\n\t\t\t'}'\r\n\t\t].join('\\n');\r\n\r\n\t\tthis.dropProgram = createProgram(vertexShader, [\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'const float PI = 3.141592653589793;',\r\n\t\t\t'uniform sampler2D texture;',\r\n\t\t\t'uniform vec2 center;',\r\n\t\t\t'uniform float radius;',\r\n\t\t\t'uniform float strength;',\r\n\r\n\t\t\t'varying vec2 coord;',\r\n\r\n\t\t\t'void main() {',\r\n\t\t\t\t'vec4 info = texture2D(texture, coord);',\r\n\r\n\t\t\t\t'float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - coord) / radius);',\r\n\t\t\t\t'drop = 0.5 - cos(drop * PI) * 0.5;',\r\n\r\n\t\t\t\t'info.r += drop * strength;',\r\n\r\n\t\t\t\t'gl_FragColor = info;',\r\n\t\t\t'}'\r\n\t\t].join('\\n'));\r\n\r\n\t\tthis.updateProgram = createProgram(vertexShader, [\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'uniform sampler2D texture;',\r\n\t\t\t'uniform vec2 delta;',\r\n\r\n\t\t\t'varying vec2 coord;',\r\n\r\n\t\t\t'void main() {',\r\n\t\t\t\t'vec4 info = texture2D(texture, coord);',\r\n\r\n\t\t\t\t'vec2 dx = vec2(delta.x, 0.0);',\r\n\t\t\t\t'vec2 dy = vec2(0.0, delta.y);',\r\n\r\n\t\t\t\t'float average = (',\r\n\t\t\t\t\t'texture2D(texture, coord - dx).r +',\r\n\t\t\t\t\t'texture2D(texture, coord - dy).r +',\r\n\t\t\t\t\t'texture2D(texture, coord + dx).r +',\r\n\t\t\t\t\t'texture2D(texture, coord + dy).r',\r\n\t\t\t\t') * 0.25;',\r\n\r\n\t\t\t\t'info.g += (average - info.r) * 2.0;',\r\n\t\t\t\t'info.g *= 0.995;',\r\n\t\t\t\t'info.r += info.g;',\r\n\r\n\t\t\t\t'gl_FragColor = info;',\r\n\t\t\t'}'\r\n\t\t].join('\\n'));\r\n\t\tgl.uniform2fv(this.updateProgram.locations.delta, this.textureDelta);\r\n\r\n\t\tthis.renderProgram = createProgram([\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'attribute vec2 vertex;',\r\n\t\t\t'uniform vec2 topLeft;',\r\n\t\t\t'uniform vec2 bottomRight;',\r\n\t\t\t'uniform vec2 containerRatio;',\r\n\t\t\t'varying vec2 ripplesCoord;',\r\n\t\t\t'varying vec2 backgroundCoord;',\r\n\t\t\t'void main() {',\r\n\t\t\t\t'backgroundCoord = mix(topLeft, bottomRight, vertex * 0.5 + 0.5);',\r\n\t\t\t\t'backgroundCoord.y = 1.0 - backgroundCoord.y;',\r\n\t\t\t\t'ripplesCoord = vec2(vertex.x, -vertex.y) * containerRatio * 0.5 + 0.5;',\r\n\t\t\t\t'gl_Position = vec4(vertex.x, -vertex.y, 0.0, 1.0);',\r\n\t\t\t'}'\r\n\t\t].join('\\n'), [\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'uniform sampler2D samplerBackground;',\r\n\t\t\t'uniform sampler2D samplerRipples;',\r\n\t\t\t'uniform vec2 delta;',\r\n\r\n\t\t\t'uniform float perturbance;',\r\n\t\t\t'varying vec2 ripplesCoord;',\r\n\t\t\t'varying vec2 backgroundCoord;',\r\n\r\n\t\t\t'void main() {',\r\n\t\t\t\t'float height = texture2D(samplerRipples, ripplesCoord).r;',\r\n\t\t\t\t'float heightX = texture2D(samplerRipples, vec2(ripplesCoord.x + delta.x, ripplesCoord.y)).r;',\r\n\t\t\t\t'float heightY = texture2D(samplerRipples, vec2(ripplesCoord.x, ripplesCoord.y + delta.y)).r;',\r\n\t\t\t\t'vec3 dx = vec3(delta.x, heightX - height, 0.0);',\r\n\t\t\t\t'vec3 dy = vec3(0.0, heightY - height, delta.y);',\r\n\t\t\t\t'vec2 offset = -normalize(cross(dy, dx)).xz;',\r\n\t\t\t\t'float specular = pow(max(0.0, dot(offset, normalize(vec2(-0.6, 1.0)))), 4.0);',\r\n\t\t\t\t'gl_FragColor = texture2D(samplerBackground, backgroundCoord + offset * perturbance) + specular;',\r\n\t\t\t'}'\r\n\t\t].join('\\n'));\r\n\t\tgl.uniform2fv(this.renderProgram.locations.delta, this.textureDelta);\r\n\t},\r\n\r\n\tinitTexture: function() {\r\n\t\tthis.backgroundTexture = gl.createTexture();\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\r\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t},\r\n\r\n\tsetTransparentTexture: function() {\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.backgroundTexture);\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, transparentPixels);\r\n\t},\r\n\r\n\thideCssBackground: function() {\r\n\r\n\t\t// Check whether we're changing inline CSS or overriding a global CSS rule.\r\n\t\tvar inlineCss = this.$el[0].style.backgroundImage;\r\n\r\n\t\tif (inlineCss == 'none') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.originalInlineCss = inlineCss;\r\n\r\n\t\tthis.originalCssBackgroundImage = this.$el.css('backgroundImage');\r\n\t\tthis.$el.css('backgroundImage', 'none');\r\n\t},\r\n\r\n\trestoreCssBackground: function() {\r\n\r\n\t\t// Restore background by either changing the inline CSS rule to what it was, or\r\n\t\t// simply remove the inline CSS rule if it never was inlined.\r\n\t\tthis.$el.css('backgroundImage', this.originalInlineCss || '');\r\n\t},\r\n\r\n\tdropAtPointer: function(pointer, radius, strength) {\r\n\t\tvar borderLeft = parseInt(this.$el.css('border-left-width')) || 0,\r\n\t\t\t\tborderTop = parseInt(this.$el.css('border-top-width')) || 0;\r\n\r\n\t\tthis.drop(\r\n\t\t\tpointer.pageX - this.$el.offset().left - borderLeft,\r\n\t\t\tpointer.pageY - this.$el.offset().top - borderTop,\r\n\t\t\tradius,\r\n\t\t\tstrength\r\n\t\t);\r\n\t},\r\n\r\n\t/**\r\n\t *  Public methods\r\n\t */\r\n\tdrop: function(x, y, radius, strength) {\r\n\t\tgl = this.context;\r\n\r\n\t\tvar elWidth = this.$el.innerWidth();\r\n\t\tvar elHeight = this.$el.innerHeight();\r\n\t\tvar longestSide = Math.max(elWidth, elHeight);\r\n\r\n\t\tradius = radius / longestSide;\r\n\r\n\t\tvar dropPosition = new Float32Array([\r\n\t\t\t(2 * x - elWidth) / longestSide,\r\n\t\t\t(elHeight - 2 * y) / longestSide\r\n\t\t]);\r\n\r\n\t\tgl.viewport(0, 0, this.resolution, this.resolution);\r\n\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers[this.bufferWriteIndex]);\r\n\t\tbindTexture(this.textures[this.bufferReadIndex]);\r\n\r\n\t\tgl.useProgram(this.dropProgram.id);\r\n\t\tgl.uniform2fv(this.dropProgram.locations.center, dropPosition);\r\n\t\tgl.uniform1f(this.dropProgram.locations.radius, radius);\r\n\t\tgl.uniform1f(this.dropProgram.locations.strength, strength);\r\n\r\n\t\tthis.drawQuad();\r\n\r\n\t\tthis.swapBufferIndices();\r\n\t},\r\n\r\n\tupdateSize: function() {\r\n\t\tvar newWidth = this.$el.innerWidth(),\r\n\t\t\t\tnewHeight = this.$el.innerHeight();\r\n\r\n\t\tif (newWidth != this.canvas.width || newHeight != this.canvas.height) {\r\n\t\t\tthis.canvas.width = newWidth;\r\n\t\t\tthis.canvas.height = newHeight;\r\n\t\t}\r\n\t},\r\n\r\n\tdestroy: function() {\r\n\t\tthis.$el\r\n\t\t\t.off('.ripples')\r\n\t\t\t.removeClass('jquery-ripples')\r\n\t\t\t.removeData('ripples');\r\n\r\n\t\t// Make sure the last used context is garbage-collected\r\n\t\tgl = null;\r\n\r\n\t\t$(window).off('resize', this.updateSize);\r\n\r\n\t\tthis.$canvas.remove();\r\n\t\tthis.restoreCssBackground();\r\n\r\n\t\tthis.destroyed = true;\r\n\t},\r\n\r\n\tshow: function() {\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.$canvas.show();\r\n\t\tthis.hideCssBackground();\r\n\t},\r\n\r\n\thide: function() {\r\n\t\tthis.visible = false;\r\n\r\n\t\tthis.$canvas.hide();\r\n\t\tthis.restoreCssBackground();\r\n\t},\r\n\r\n\tpause: function() {\r\n\t\tthis.running = false;\r\n\t},\r\n\r\n\tplay: function() {\r\n\t\tthis.running = true;\r\n\t},\r\n\r\n\tset: function(property, value) {\r\n\t\tswitch (property) {\r\n\t\t\tcase 'dropRadius':\r\n\t\t\tcase 'perturbance':\r\n\t\t\tcase 'interactive':\r\n\t\t\tcase 'crossOrigin':\r\n\t\t\t\tthis[property] = value;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'imageUrl':\r\n\t\t\t\tthis.imageUrl = value;\r\n\t\t\t\tthis.loadImage();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// RIPPLES PLUGIN DEFINITION\r\n// ==========================\r\n\r\nvar old = $.fn.ripples;\r\n\r\n$.fn.ripples = function(option) {\r\n\tif (!config) {\r\n\t\tthrow new Error('Your browser does not support WebGL, the OES_texture_float extension or rendering to floating point textures.');\r\n\t}\r\n\r\n\tvar args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\r\n\r\n\treturn this.each(function() {\r\n\t\tvar $this = $(this),\r\n\t\t\t\tdata = $this.data('ripples'),\r\n\t\t\t\toptions = $.extend({}, Ripples.DEFAULTS, $this.data(), typeof option == 'object' && option);\r\n\r\n\t\tif (!data && typeof option == 'string') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!data) {\r\n\t\t\t$this.data('ripples', (data = new Ripples(this, options)));\r\n\t\t}\r\n\t\telse if (typeof option == 'string') {\r\n\t\t\tRipples.prototype[option].apply(data, args);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n$.fn.ripples.Constructor = Ripples;\r\n\r\n\r\n// RIPPLES NO CONFLICT\r\n// ====================\r\n\r\n$.fn.ripples.noConflict = function() {\r\n\t$.fn.ripples = old;\r\n\treturn this;\r\n};\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jquery.ripples/dist/jquery.ripples.js\n");

/***/ })

};
;